generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String             @id @default(cuid())
  name             String?
  email            String             @unique
  emailVerified    DateTime?
  image            String?
  password         String
  isPaid           Boolean            @default(false)
  phone            String?
  alpacaId         String?
  ActiveStrategies ActiveStrategies[]
  PaidUsers        PaidUsers[]
  sessions         Session[]
  Strategy         Strategy[]
}

model PaidUsers {
  id             String   @id @default(cuid())
  userId         String
  membershipType String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Strategy {
  id             String           @id @default(cuid())
  name           String
  description    String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  userId         String?
  RebalanceDates RebalanceDates[]
  User           User?            @relation(fields: [userId], references: [id])
}

model RebalanceDates {
  id            String   @id @default(cuid())
  strategyId    String
  lastRebalance DateTime
  nextRebalance DateTime
  strategy      Strategy @relation(fields: [strategyId], references: [id])
}

model ActiveStrategies {
  id          String   @id @default(cuid())
  userId      String
  strategyId  String
  amount      Float
  activatedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
